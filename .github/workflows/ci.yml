name: CI

on: [push, pull_request]

jobs:
  build-kernel:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install build depencies
        run: sudo apt-get install -y ccache device-tree-compiler libelf-dev

      - name: Checkout repos
        run: git clone --depth 1 https://github.com/LabNConsulting/iptfs-linux.git linux -b iptfs

      - name: Kernel Build Cache
        id: linux-cache
        uses: actions/cache@v3
        with:
          path: output-linux.tar.gz
          # need a glob that doesn't match "stats" or TAG files
          key: ${{ runner.os }}-${{ hashFiles('output-linux.tar.gz') }}

      - name: Build Kernel
        run: |
          if [ -f output-linux.tar.gz ]; then
            echo "Cache found, extracting"
            tar -xpzf output-linux.tar.gz
            # If the kernel config is changed just wipe the cache
            if ! diff -q -u1 linux.config output-linux/.config -I '^[ \t]*#' -I '^[ \t]*$' 2>/dev/null; then
              echo "Kernel configs differ erasing cache"
              rm -rf output-linux output-linux.tar.gz
            fi
          fi
          export CCACHE_DIR=$PWD/output-linux/.ccache
          if [ ! -d output-linux ]; then
            echo "Creating new output directory"
            mkdir output-linux
            cp linux.config output-linux/.config
          fi
          cd output-linux
          ccache -z
          KBUILD_BUILD_TIMESTAMP='' make CC="ccache gcc" -j2 O=$PWD -C ../linux
          ccache -sz
          [ -e arch/x86/boot/bzImage ] && mv arch/x86/boot/bzImage ..
          # Ccache keeps it's own objects
          make clean
          # tar up the remaining files including .ccache
          cd ..
          echo "Collecting new cache contents"
          tar -czf output-linux.tar.gz output-linux

      - name: Archive kernel bzImage
        uses: actions/upload-artifact@v3
        with:
          name: kernel-bzImage
          path: bzImage
          retention-days: 1

  build-rootfs:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout repos
        run: make setup SHALLOW_CLONE=1

      - name: Install build depencies
        run: sudo apt-get install -y device-tree-compiler libelf-dev

      - name: Buildroot Build Cache
        id: buildroot-cache
        uses: actions/cache@v3
        with:
          path: output-buildroot
          key: ${{ runner.os }}-${{ hashFiles('buildroot.config') }}

      - name: Build Rootfs
        run: |
          if ! diff -q -u1 buildroot.config output-buildroot/.config -I '^[ \t]*#' -I '^[ \t]*$' 2>/dev/null; then
            echo "Buildroot configs differ erasing cache"
            rm -rf output-buildroot
            mkdir output-buildroot
            cp buildroot.config output-buildroot/.config
          fi
          cd output-buildroot
          make -j6 O=$PWD -C ../buildroot

      - name: Archive buildroot rootfs.cpio.gz
        uses: actions/upload-artifact@v3
        with:
          name: rootfs-compressed-cpio
          path: output-buildroot/images/rootfs.cpio.gz
          retention-days: 1

  test:
    runs-on: ubuntu-22.04
    needs: ["build-kernel", "build-rootfs"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install test depencies
        run: |
          sudo apt-get install -y qemu-system-x86 socat
          sudo python3 -m pip install -U munet pytest pytest-asyncio

      - name: Archive kernel bzImage
        uses: actions/download-artifact@v3
        with:
          name: kernel-bzImage

      - name: Archive buildroot rootfs.cpio.gz
        uses: actions/download-artifact@v3
        with:
          name: rootfs-compressed-cpio

      - name: Simple test
        run: |
          mkdir -p output-linux/arch/x86/boot/
          mv bzImage output-linux/arch/x86/boot/
          mkdir -p output-buildroot/images/
          mv rootfs.cpio.gz output-buildroot/images/
          sudo python3 -m pytest -v -s tests/simplenet

      - name: Collect test logs
        if: ${{ always() }}
        run: |
          sudo find /tmp/unet-test -type s -exec rm {} +
          mkdir -p test-logs
          sudo tar -C /tmp/unet-test -cf - . | tar -C test-logs -xf -
          tar -cf - test-logs | xz -c > test-logs.tar.xz

      - name: Archive test logs tarball
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-tar
          path: test-logs.tar.xz

      - name: Archive test logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-files
          path: test-logs
