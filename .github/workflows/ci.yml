name: CI

on: [push, pull_request]

jobs:
  build-fast-kernel:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install build depencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ccache device-tree-compiler libelf-dev xz-utils

      - name: Checkout repos
        run: git clone --depth 1 https://github.com/LabNConsulting/iptfs-linux.git linux -b iptfs

      - name: Kernel build cache
        id: linux-cache
        uses: actions/cache@v3
        with:
          path: output-linux.tar.xz
          # We need a unique key name in order for new versions to save
          key: ${{ runner.os }}-kernel-${{ hashFiles('linux-fast.config', 'output-linux.tar.xz') }}
          restore-keys: |
            key: ${{ runner.os }}-kernel-

      - name: Build kernel
        run: |
          rm -rf output-linux
          if [ -f output-linux.tar.xz ]; then
            echo "Cache found, extracting"
            tar -xpJf output-linux.tar.xz
            # If the kernel config is changed just wipe the cache
            if ! diff -q -u1 linux-fast.config output-linux/.config -I '^[ \t]*#' -I '^[ \t]*$' 2>/dev/null; then
              echo "Kernel configs differ erasing cache"
              rm -rf output-linux output-linux.tar.xz
            fi
          fi

          export CCACHE_DIR=$PWD/output-linux/.ccache
          if [ ! -d output-linux ]; then
            echo "Creating new output directory"
            mkdir output-linux
            cp linux-fast.config output-linux/.config
          fi
          cd output-linux
          ccache -z
          KBUILD_BUILD_TIMESTAMP='' make CC="ccache gcc" -j2 O=$PWD -C ../linux
          ccache -sz
          [ -e arch/x86/boot/bzImage ] && mv arch/x86/boot/bzImage ..
          # Ccache keeps it's own objects
          make clean

          # tar up the remaining files including .ccache
          cd ..
          echo "Collecting new cache contents"
          tar -cf - output-linux | xz -T0 -c > output-linux.tar.xz
          ls -hl output-linux.tar.xz

      - name: Archive kernel bzImage
        uses: actions/upload-artifact@v3
        with:
          name: kernel-bzImage
          path: bzImage
          retention-days: 1

  build-cov-kernel:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install build depencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ccache device-tree-compiler libelf-dev xz-utils

      - name: Checkout repos
        run: git clone --depth 1 https://github.com/LabNConsulting/iptfs-linux.git linux -b iptfs

      - name: Coverage kernel build cache
        id: linux-cov-cache
        uses: actions/cache@v3
        with:
          path: output-cov-linux.tar.xz
          # We need a unique key name in order for new versions to save
          key: ${{ runner.os }}-cov-kernel-${{ hashFiles('linux-cov.config', 'output-cov-linux.tar.xz') }}
          restore-keys: |
            key: ${{ runner.os }}-cov-kernel-

      - name: Build coverage kernel
        run: |
          rm -rf output-cov-linux
          if [ -f output-cov-linux.tar.xz ]; then
            echo "Cache found, extracting"
            tar -xpJf output-cov-linux.tar.xz
            # If the kernel config is changed just wipe the cache
            if ! diff -q -u1 linux-cov.config output-cov-linux/.config -I '^[ \t]*#' -I '^[ \t]*$' 2>/dev/null; then
              echo "Kernel configs differ erasing cache"
              rm -rf output-cov-linux output-cov-linux.tar.xz
            fi
          fi

          export CCACHE_DIR=$PWD/output-cov-linux/.ccache
          if [ ! -d output-cov-linux ]; then
            echo "Creating new output directory"
            mkdir output-cov-linux
            cp linux-cov.config output-cov-linux/.config
          fi
          cd output-cov-linux
          ccache -z
          KBUILD_BUILD_TIMESTAMP='' make CC="ccache gcc" -j2 O=$PWD -C ../linux
          ccache -sz
          [ -e arch/x86/boot/bzImage ] && mv arch/x86/boot/bzImage ..
          # Ccache keeps it's own objects
          make clean

          # tar up the remaining files including .ccache
          cd ..
          echo "Collecting new cache contents"
          tar -cf - output-cov-linux | xz -T0 -c > output-cov-linux.tar.xz
          ls -hl output-cov-linux.tar.xz

      - name: Archive coverage kernel bzImage
        uses: actions/upload-artifact@v3
        with:
          name: kernel-cov-bzImage
          path: bzImage
          retention-days: 1

  build-rootfs:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Checkout repos
        run: make setup SHALLOW_CLONE=1

      - name: Install build depencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y device-tree-compiler libelf-dev

      - name: Buildroot Build Cache
        id: buildroot-cache
        uses: actions/cache@v3
        with:
          path: output-buildroot.tar.gz
          key: ${{ runner.os }}-br-${{ hashFiles('buildroot.config', 'output-buildroot.tar.gz') }}
          restore-keys: |
            key: ${{ runner.os }}-br-

      - name: Build Rootfs
        run: |
          if [ -f output-buildroot.tar.xz ] || [ -f output-buildroot.tar.gz ]; then
            echo "Cache found, extracting"
            if [ -f output-buildroot.tar.xz ]; then
              tar -xpJf output-buildroot.tar.xz
            else
              tar -xpzf output-buildroot.tar.gz
            fi
            # If the buildroot config is changed just wipe the cache
            if ! diff -q -u1 buildroot.config output-buildroot/.config -I '^[ \t]*#' -I '^[ \t]*$' 2>/dev/null; then
              echo "Buildroot configs differ erasing cache"
              rm -rf output-buildroot output-buildroot.tar.gz
            fi
          fi

          if [ ! -d output-buildroot ]; then
            echo "Creating new output directory"
            mkdir -p output-buildroot
            cp -p buildroot.config output-buildroot/.config
            cd output-buildroot
          else
            cd output-buildroot
            make -j6 O=$PWD -C ../buildroot iproute2-dirclean
          fi
          make -j6 O=$PWD -C ../buildroot

          # tar up the remaining files including .ccache
          cd ..
          echo "Collecting new cache contents: $(date)"
          tar -czf output-buildroot.tar.gz output-buildroot
          ls -hl output-buildroot.tar.gz
          echo "Done collecting new cache contents: $(date)"

      - name: Archive buildroot rootfs.cpio.gz
        uses: actions/upload-artifact@v3
        with:
          name: rootfs-compressed-cpio
          path: output-buildroot/images/rootfs.cpio.gz
          retention-days: 1

  test:
    runs-on: ubuntu-22.04
    needs: ["build-cov-kernel", "build-rootfs"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install test depencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y lcov qemu-system-x86 socat
          sudo python3 -m pip install -U munet pytest pytest-asyncio scapy

      # Would be nice to loop this w/ and w/o coverage

      - name: Fetch coverage kernel bzImage archive
        uses: actions/download-artifact@v3
        with:
          name: kernel-cov-bzImage

      - name: Fetch buildroot rootfs.cpio.gz archive
        uses: actions/download-artifact@v3
        with:
          name: rootfs-compressed-cpio

      - name: Prep tests
        run: |
          mkdir -p output-linux/arch/x86/boot/
          mv bzImage output-linux/arch/x86/boot/
          mkdir -p output-buildroot/images/
          mv rootfs.cpio.gz output-buildroot/images/

      - name: Print the environment under sudo
        run: sudo -E env

      - name: Config test
        run: |
          set -e
          tmpf=/tmp/test-results-$$.txt
          sudo -E env CI=$CI python3 -m pytest -s --coverage tests/config | tee $tmpf
          grep -v SKIPPED $tmpf

      - name: Errors test
        run: |
          set -e
          tmpf=/tmp/test-results-$$.txt
          sudo -E env CI=$CI python3 -m pytest -s --coverage tests/errors | tee $tmpf
          grep -v SKIPPED $tmpf

      - name: Simple test
        run: |
          set -e
          tmpf=/tmp/test-results-$$.txt
          sudo -E env CI=$CI python3 -m pytest -s --coverage tests/simplenet | tee $tmpf
          grep -v SKIPPED $tmpf

      - name: UT packet test
        run: |
          set -e
          tmpf=/tmp/test-results-$$.txt
          sudo python3 -m pytest -s --coverage tests/utpkt | tee $tmpf
          grep -v SKIPPED $tmpf

      - name: Extract coverage data
        if: ${{ always() }}
        run: |
          whoami
          bash scripts/extract-cov.sh
          mkdir -p test-logs
          sudo cp *.info test-logs
          sudo find /tmp/unet-test -name 'gcov-data.tgz' -exec rm

      - name: Collect test logs
        if: ${{ always() }}
        run: |
          sudo find /tmp/unet-test -type s -exec rm {} +
          mkdir -p test-logs
          sudo tar -C /tmp/unet-test -cf - . | tar -C test-logs -xf -
          tar -cjf test-logs.tar.bz2 test-logs

      - name: Archive test logs tarball
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-tar
          path: test-logs.tar.bz2

  deploy:
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')
    needs: ["build-fast-kernel", "build-rootfs", "test"]
    steps:

      - name: Download kernel bzImage
        uses: actions/download-artifact@v3
        with:
          name: kernel-bzImage

      - name: Download buildroot rootfs.cpio.gz
        uses: actions/download-artifact@v3
        with:
          name: rootfs-compressed-cpio

      - name: Deploy
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bzImage
            rootfs.cpio.gz
